// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(TransportationContext))]
    partial class TransportationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.BoundedWalk", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("EndID")
                        .HasColumnType("int");

                    b.Property<int?>("StartID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EndID");

                    b.HasIndex("StartID");

                    b.ToTable("BoundedWalks");
                });

            modelBuilder.Entity("DAL.Entities.Itinerary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("End")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("DAL.Entities.Recording", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ItineraryID")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RecordingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RouteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ItineraryID");

                    b.HasIndex("RouteID");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("DAL.Entities.Route", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("DAL.Entities.RouteJourney", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("EndID")
                        .HasColumnType("int");

                    b.Property<int?>("ItineraryID")
                        .HasColumnType("int");

                    b.Property<int?>("RouteID")
                        .HasColumnType("int");

                    b.Property<int?>("StartID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EndID");

                    b.HasIndex("ItineraryID");

                    b.HasIndex("RouteID");

                    b.HasIndex("StartID");

                    b.ToTable("RouteJourneys");
                });

            modelBuilder.Entity("DAL.Entities.RouteStop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RouteID")
                        .HasColumnType("int");

                    b.Property<int>("StopID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RouteID");

                    b.HasIndex("StopID");

                    b.ToTable("RouteStops");
                });

            modelBuilder.Entity("DAL.Entities.Stop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("DAL.Entities.Walk", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.HasKey("ID");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("DAL.Entities.BoundedWalk", b =>
                {
                    b.HasOne("DAL.Entities.Stop", "End")
                        .WithMany()
                        .HasForeignKey("EndID");

                    b.HasOne("DAL.Entities.Stop", "Start")
                        .WithMany()
                        .HasForeignKey("StartID");

                    b.Navigation("End");

                    b.Navigation("Start");
                });

            modelBuilder.Entity("DAL.Entities.Recording", b =>
                {
                    b.HasOne("DAL.Entities.Itinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("ItineraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.Navigation("Itinerary");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("DAL.Entities.RouteJourney", b =>
                {
                    b.HasOne("DAL.Entities.Stop", "End")
                        .WithMany()
                        .HasForeignKey("EndID");

                    b.HasOne("DAL.Entities.Itinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("ItineraryID");

                    b.HasOne("DAL.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.HasOne("DAL.Entities.Stop", "Start")
                        .WithMany()
                        .HasForeignKey("StartID");

                    b.Navigation("End");

                    b.Navigation("Itinerary");

                    b.Navigation("Route");

                    b.Navigation("Start");
                });

            modelBuilder.Entity("DAL.Entities.RouteStop", b =>
                {
                    b.HasOne("DAL.Entities.Route", null)
                        .WithMany()
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Stop", null)
                        .WithMany()
                        .HasForeignKey("StopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
